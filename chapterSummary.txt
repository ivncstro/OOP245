Introduction::Welcome
{
object-oriented languages are designed for solving large, complex problems
object-oriented programming focuses on the objects in a problem domain
C++ is a hybrid language that can focus on activities as well as objects
C++ provides improved type safety relative to C
cout is the library object that represents the standard output device
cin is the library object that represents the standard input device
<< is the operator that inserts data into the object on its left-side operand
>> is the operator that extracts data from the object on its left-side operand
}
-----------------------------------------------------------------------------------------------------------------------------------------------
Introduction::Object Terminology
{
An object is a chunk of information with a crisp conceptual boundary and a well-defined structure.
Objects are abstractions of the most important chunks of information from a problem domain. They distinguish the different feature sets in the problem domain.
A class describes the structure common to a set of similar objects. Each object in the set is a single instance of its class.
Encapsulation hides the implementation details within a class - the internal data and internal logic are invisible to client applications that use objects of that class.
We can upgrade the structure of a well-encapsulated class without altering any client code.
The cornerstones of object-oriented programming are encapsulation, inheritance and polymorphism.
}
-----------------------------------------------------------------------------------------------------------------------------------------------
Introduction::Modular Programming 
{
a module consists of a header file and an implementation file
a module's header file declares the names that are exposed to client modules
a module's implementation file defines the module's logic
a module's implementation file needs the header files of those modules that define classes or functions used in the implementation file
the three stages of creating an executable are preprocessing, compiling, and linking
it is good practice to write the suite of unit tests for each module of an application before coding the module's implementation
}
-----------------------------------------------------------------------------------------------------------------------------------------------
Foundations::Types and Overloading References 
{
a bool type can only hold a true value or a false value
C++ requires the struct or class keyword only in the definition of the class itself
a declaration associates an identifier with a type
a definition attaches meaning to an identifier and is an executable statement
a definition is a declaration, but a declaration is not necessarily a definition
the scope of a declaration is that part of the program throughout which the declaration is visible
we overload a function by changing its signature
a function's signature consists of its identifier, its parameter types, and the order of its parameter types
a C++ function prototype must include all of the parameter types and the return type
the & operator on a parameter type instructs the compiler to pass by reference
pass by reference syntax simplifies the pass by address syntax in most cases
an array of pointers is a data structure that provides an efficient way for iterating through a set of objects based on their current type
}
-----------------------------------------------------------------------------------------------------------------------------------------------
Foundations::Dynamic Memory
{
The memory available to an application at run-time consists of static memory and dynamic memory
Static memory lasts the lifetime of the application
The linker determines the amount of static memory used by the application
The operating system provides dynamic memory to an application at run-time upon request
The keyword new[] allocates a contiguous region of dynamic memory and returns its starting address
We store the address of dynamically allocated memory in static memory
delete[] deallocates contiguous memory starting at the specified address
Allocated memory must be deallocated within the scope of the pointer that holds its address
}
-----------------------------------------------------------------------------------------------------------------------------------------------
Member Functions and Privacy
{
Object-oriented classes may contain both data members and member functions
The keyword private identifies subsequent members as inaccessible to any client
The keyword public identifies subsequent members as accessible to any client
Data members hold the information about an object's state
Member functions describe the logic that an object performs on its data members
A query reports the state of an object without changing its state
A modifier changes the state of an object
An empty state is the set of data values that identifies the absence of valid data in an object
A field width setting only holds for the next field
All settings other than a field width setting persist until changed
Precision has different meanings under general, scientific, and fixed formats
}
-----------------------------------------------------------------------------------------------------------------------------------------------
Constructors and Destructors
{
We refer to the data members of an object as its instance variables
Privacy operates at the class level, not at the object level
The constructor is a special member function that an object invokes at creation time
The name of the constructor is the name of the class
The destructor is a special member function that an object invokes at destruction time
The name of the destructor is the name of the class prefixed by a ~
The constructor and destructor do not have return types
The compiler inserts an empty body constructor/destructor into any class definition that does not declare a constructor/destructor
The compiler does not insert an empty-body, no-argument constructor into a class definition that declares any form of constructor
}
-----------------------------------------------------------------------------------------------------------------------------------------------
The Current Object - this and *this
{
The current object is the current host object for the member function a member function's parameters consist of implicit and explicit parameters
A member function's explicit parameters receive information from the client code
A member function's implicit parameters bind the function to the instance variables of current object
The keyword this holds the address of the current object
*this refers to the current object itself
The keyword this is meaningless outside a member function
}
-----------------------------------------------------------------------------------------------------------------------------------------------
Member Operators
{
C++ allows overloading of most of the operators for operands of class type
We cannot define new operators or redefine operations on the fundamental types
The keyword operator followed by a symbol identifies an operation
The left operand in an overloaded member operator is the current object
We use member operators to overload operations that modify the left operand
The int keyword in the signature for increment/decrement operator identifies the post-fix operation distinguishing it from the pre-fix operation
We use temporary objects to localize logic, which improves maintainability
}
-----------------------------------------------------------------------------------------------------------------------------------------------
Classes and Operators
{
    two special member functions manage allocations and deallocations associated with deep copying and assigning:
        - the copy constructor
        - the copy assignment operator
    
}

Code Quiz 1 (not marked) - 502811